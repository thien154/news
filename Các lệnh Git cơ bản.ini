Các lệnh Git cơ bản
1. Git config
Công dụng: Hai cài đặt quan trọng của git là user name và email
Có nhiều cách để để điều chỉnh git config, có thể tùy chỉnh kết quả output màu và thay đổi hành vi git status. Bạn cói thể tìm hiểu git config trong tài liệu Git chính thức.

Sử dụng: Khi bạn muốn kiểm tra trên và email trong cấu hình dùng lệnh:
Copy
$ git config <setting> <command>
Thực tế:
Copy
# Running git config globally
$ git config --global user.email "my@emailaddress.com"
$ git config --global user.name "Example"
# Running git config on the current repository settings
$ git config user.email "my@emailaddress.com"
$ git config user.name "Example"
2. Git init
Công dụng: Dùng để tạo một kho lưu trữ (repository) và 1 dự án (project) mới.
Sử dụng: Dùng lệnh git init trong thư mục gốc của dự án.
3. Git add
Công dụng: Thêm các file vào stage/index. Một số cách khác có thể sử dụng git add bằng cách thêm toàn bộ thư mục, các file cụ thể.
Sử dụng:
Copy
$ git add <file or directory name>
Trong thực tế:
Copy
# To add all files not staged:
$ git add .
# To stage a specific file:
$ git add index.html
# To stage an entire directory:
$ git add css
4. Git commit
Công dụng: Dùng để ghi lại những thay đổi được thực hiện đối với file vào local repository. Để dễ dàng theo dõi commit và mỗi commit sẽ có một mã ID theo dõi duy nhất.
Sử dụng:
Copy
# Adding a commit with message
$ git commit -m "Commit message in quotes"
Thực tế:
Copy
$ git commit -m "My first commit message"
[SecretTesting 0254c3d] My first commit message
1 file changed, 0 insertions(+), 0 deletions(-)
create mode 100644 homepage/index.html
5. Git status
Công dụng: Sử dụng lệnh này để trả về trạng thái tại kho lưu trữ (repository). git status sẽ trả về nhánh làm việc hiện tại của bạn. Nếu một file nằm trong stagging area nhưng không được commit thì nó sẽ hiển thị với git status. Hoặc nếu không có thay đổi nào no sẽ trả về nothing to commit, working directory clean
Sử dụng:
Copy
$ git status
Thực tế:
Copy
# Message when files have not been staged (git add)
$ git status
On branch SecretTesting
Untracked files:
  (use "git add <file>..." to include in what will be committed)

  	homepage/index.html

# Message when files have been not been committed (git commit)
$ git status
On branch SecretTesting
Your branch is up-to-date with 'origin/SecretTesting'.
Changes to be committed:
  (use "git reset HEAD <file>..." to unstage)

        new file:   homepage/index.html

# Message when all files have been staged and committed 
$ git status
On branch SecretTesting
nothing to commit, working directory clean
6. Git branch
Công dụng: Để xác định nhánh nào trong local repository, thêm hoặc xóa một nhánh mới.
Sử dụng:
Copy
# Create a new branch
$ git branch <branch_name>

# List all remote or local branches
$ git branch -a

# Delete a branch
$ git branch -d <branch_name>
Trong thực tế thì:
Copy
# Create a new branch
$ git branch new_feature

# List branches
$ git branch -a
* SecretTesting
  new_feature
  remotes/origin/stable
  remotes/origin/staging
  remotes/origin/master -> origin/SecretTesting
  
# Delete a branch
$ git branch -d new_feature
Deleted branch new_feature (was 0254c3d).
7. Git checkout
Công dụng: Sử dụng git checkoutđể chuyển đổi các chi nhánh.
Sử dụng:
Copy
# Checkout an existing branch
$ git checkout <branch_name>

# Checkout and create a new branch with that name
$ git checkout -b <new_branch>
Thực tế:
Copy
# Switching to branch 'new_feature'
$ git checkout new_feature
Switched to branch 'new_feature'

# Creating and switching to branch 'staging'
$ git checkout -b staging
Switched to a new branch 'staging'
8. Git merge
Công dụng: Hợp nhất các nhánh với nhau, sử dụng git merge để kết hợp các thau đổi từ nhánh này sang nhánh khác.
Sử dụng:
Copy
# Merge changes into current branch
$ git merge <branch_name>
Trong thực tế:
Copy
# Merge changes into current branch
$ git merge new_feature
Updating 0254c3d..4c0f37c
Fast-forward
 homepage/index.html | 297 ++++++++++++++++++++++++++++++++++++++++++++++++++++++++
 1 file changed, 297 insertions(+)
 create mode 100644 homepage/index.html
9. Git remote
Công dụng: Để kết nối repository với kho lưu trữ từ xa.
Sử dụng:
Copy
# Add remote repository
$ git remote <command> <remote_name> <remote_URL>

# List named remote repositories
$ git remote -v
Trong thực tế:
Copy
# Adding a remote repository with the name of beanstalk
$ git remote add origin git@account_name.git.beanstalkapp.com:/acccount_name/repository_name.git

# List named remote repositories
$ git remote -v
origin git@account_name.git.beanstalkapp.com:/acccount_name/repository_name.git (fetch)
origin git@account_name.git.beanstalkapp.com:/acccount_name/repository_name.git (push)
10. Git clone
Công dụng: Để tạo một bản sao làm việc cục bộ với kho lưu trữ từ xa. Sử dụng git clone để sao chép và tải kho lưu trữ về máy tính. Sao chép giống với Git init khi làm việc với kho lưu trữ từ xa.
Sử dụng:
Copy
$ git clone <remote_URL>
Trong thực tế:
Copy
$ git clone git@account_name.git.beanstalkapp.com:/acccount_name/repository_name.git
Cloning into 'repository_name'...
remote: Counting objects: 5, done.
remote: Compressing objects: 100% (3/3), done.
remote: Total 5 (delta 0), reused 0 (delta 0)
Receiving objects: 100% (5/5), 3.08 KiB | 0 bytes/s, done.
Checking connectivity... done.
11. Git pull
Công dụng: Chạy git pull để tải phiên bản mới nhất của repository. Thao tác với lệnh này kéo các thay đổi từ kho lưu trữ từ xa sang máy tính cục bộ.
Sử dụng:
Copy
$ git pull <branch_name> <remote_URL/remote_name>
Trong thực tế:
Copy
# Pull from named remote
$ git pull origin staging
From account_name.git.beanstalkapp.com:/account_name/repository_name
 * branch            staging    -> FETCH_HEAD
 * [new branch]      staging    -> origin/staging
Already up-to-date.

# Pull from URL (not frequently used)
$ git pull git@account_name.git.beanstalkapp.com:/acccount_name/repository_name.git staging
From account_name.git.beanstalkapp.com:/account_name/repository_name
 * branch            staging    -> FETCH_HEAD
 * [new branch]      staging    -> origin/staging
Already up-to-date.
12. Git push
Công dụng: Dùng để gửi commit đến kho lưu trữ từ xa. git push sử dụng 2 tham số: kho lưu trữ từ xa và nhánh mà push dành cho.
Sử dụng:
Copy
$ git push <remote_URL/remote_name> <branch>

# Push all local branches to remote repository
$ git push —all
Trong thực tế:
Copy
# Push a specific branch to a remote with named remote
$ git push origin staging
Counting objects: 5, done.
Delta compression using up to 4 threads.
Compressing objects: 100% (3/3), done.
Writing objects: 100% (5/5), 734 bytes | 0 bytes/s, done.
Total 5 (delta 2), reused 0 (delta 0)
To git@account_name.git.beanstalkapp.com:/acccount_name/repository_name.git
   ad189cb..0254c3d  SecretTesting -> SecretTesting

# Push all local branches to remote repository
$ git push --all
Counting objects: 4, done.
Delta compression using up to 4 threads.
Compressing objects: 100% (4/4), done.
Writing objects: 100% (4/4), 373 bytes | 0 bytes/s, done.
Total 4 (delta 2), reused 0 (delta 0)
remote: Resolving deltas: 100% (2/2), completed with 2 local objects.
To git@account_name.git.beanstalkapp.com:/acccount_name/repository_name.git
   0d56917..948ac97  master -> master
   ad189cb..0254c3d  SecretTesting -> SecretTesting
Các lệnh Git nâng cao
1. Git stash
Công dụng: Dùng để lưu các thay đổi được thực hiện nó chưa ở trạng thái commit đến repository.
Sử dụng:
Copy
# Store current work with untracked files
$ git stash -u

# Bring stashed work back to the working directory
$ git stash pop
Trong thực tế:
Copy
# Store current work
$ git stash -u
Saved working directory and index state WIP on SecretTesting: 4c0f37c Adding new file to branch
HEAD is now at 4c0f37c Adding new file to branch

# Bring stashed work back to the working directory
$ git stash pop
On branch SecretTesting
Your branch and 'origin/SecretTesting' have diverged,
and have 1 and 1 different commit each, respectively.
  (use "git pull" to merge the remote branch into yours)
Changes not staged for commit:
  (use "git add <file>..." to update what will be committed)
  (use "git checkout -- <file>..." to discard changes in working directory)

        modified:   index.html

no changes added to commit (use "git add" and/or "git commit -a")
Dropped refs/stash@{0} (3561897724c1f448ae001edf3ef57415778755ec)
2. Git log
Công dụng: Để hiển thị lịch sử commit theo thời gian cho một repository.
Sử dụng:
Copy
# Show entire git log
$ git log

# Show git log with date pameters
$ git log --<after/before/since/until>=<date>

# Show git log based on commit author
$ git log --<author>="Author Name"
Trong thực tế:
Copy
# Show entire git log
$ git log
commit 4c0f37c711623d20fc60b9cbcf393d515945952f
Author: Brian Kerr <my@emailaddress.com>
Date:   Tue Oct 25 17:46:11 2016 -0500

    Updating the wording of the homepage footer 
    
commit 0254c3da3add4ebe9d7e1f2e76f015a209e1ef67
Author: Ashley Harpp <my@emailaddress.com>
Date:   Wed Oct 19 16:27:27 2016 -0500

    My first commit message

# Show git log with date pameters
$ git log --before="Oct 20"
commit 0254c3da3add4ebe9d7e1f2e76f015a209e1ef67
Author: Ashley Harpp <my@emailaddress.com>
Date:   Wed Oct 19 16:27:27 2016 -0500

    My first commit message

# Show git log based on commit author
$ git log --author="Brian Kerr"
commit 4c0f37c711623d20fc60b9cbcf393d515945952f
Author: Brian Kerr <my@emailaddress.com>
Date:   Tue Oct 25 17:46:11 2016 -0500

    Updating the wording of the homepage footer 
3. Git rm
Công dụng: Xóa file hoặc folder khỏi index (staging area). Với git rm có hai tùy chọn cần lưu ý: buộc và lưu vào bộ nhớ cache. Lệnh được lưu trong bộ nhớ cache sẽ xóa file và folder khỏi index.
Sử dụng:
Copy
# To remove a file from the working index (cached):
$ git rm --cached <file name>

# To delete a file (force):
$ git rm -f <file name>

# To remove an entire directory from the working index (cached):
$ git rm -r --cached <directory name>

# To delete an entire directory (force):
$ git rm -r -f <file name>
Trong thực tế:
Copy
# To remove a file from the working index:
$ git rm --cached css/style.css
rm 'css/style.css'

# To delete a file (force):
$ git rm -f css/style.css
rm 'css/style.css'

# To remove an entire directory from the working index (cached):
$ git rm -r --cached css/
rm 'css/style.css'
rm 'css/style.min.css'

# To delete an entire directory (force):
$ git rm -r -f css/
rm 'css/style.css'
rm 'css/style.min.css'
Lời khuyên khi sử dụng Git trong công việc
==========================

tao nhanh
git branch dev
git checkout dev
git push --set-upstream origin dev
git config --global --add safe.directory C:/apps/news